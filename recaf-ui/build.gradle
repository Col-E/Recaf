plugins {
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'application'
}

mainClassName = "me.coley.recaf.RecafUI"

configurations {
    common
    implementation.extendsFrom common
}

dependencies {
    implementation project(':recaf-core')
    implementation awaitility
    implementation hppc
    implementation richtextfx
    // TODO: Official Java 8 artifact https://github.com/panemu/tiwulfx-dock/issues/5
    implementation 'com.github.Col-E:tiwulfx-dock:0.3'
    // TODO: Replace once 0.0.4 is released officially
    implementation 'com.github.Col-E:fxgraph:0.0.4'
    implementation pe
    implementation jelf
    // Compatibility for Java 9+
    if (!JavaVersion.current().isJava9Compatible()) {
        compileOnly project(':recaf-facade')
    }
    // Compatibility for compiling on Java 9+ when JavaFX is not bundled
    def javafxPlatform = getJavaFxPlatform()
    compileOnly group: 'org.openjfx', name: 'javafx-base', version: '16', classifier: javafxPlatform
    compileOnly group: 'org.openjfx', name: 'javafx-graphics', version: '16', classifier: javafxPlatform
    compileOnly group: 'org.openjfx', name: 'javafx-controls', version: '16', classifier: javafxPlatform
}

compileJava {
    // Required to exclude warning for using 'sun.misc.Unsafe'
    options.compilerArgs << '-XDignore.symbol.file'
    options.forkOptions.executable = 'javac'
    options.fork = true
}

shadowJar {
    // Configured to match legacy release naming conventions.
    // This prevents major breaking of prior automated systems that depend on
    // the full release of the jar fitting a given pattern.
    archiveBaseName.set('recaf')
    archiveClassifier.set('J8-jar-with-dependencies')
    archiveVersion.set(project.version)
    // ANTLR doesn't need Icu4J's resources (14 mb)
    minimize {
        exclude("com/ibm/icu/impl/data/icudt70b/*")
    }
}

def getDependenciesUrls(configuration) {
    def list = new ArrayList<String>()
    configuration.allDependencies.each {
        for (def repo : repositories) {
            def url = repo.repositoryUrls[0]
            if ('file' == url.scheme) {
                continue
            }
            def jarUrl = String.format("%s%s/%s/%s/%s-%s.jar", url.toString(),
                    it.group.replace('.', '/'), it.name, it.version,
                    it.name, it.version)
            try {
                new URL(jarUrl).openStream().close()
                list.add(jarUrl)
                return
            } catch (IOException ignored) {
            }
        }
    }
    return list
}

private static def getJavaFxPlatform() {
    def os = System.getProperty('os.name').toLowerCase(Locale.ENGLISH)
    if (os.contains('win')) {
        return 'win'
    }
    if (os.contains('nix') || os.contains('nux')) {
        return 'linux'
    }
    if (os.contains('osx') || os.contains('mac')) {
        return 'mac'
    }
    assert false: "unknown os: $os"
}

jar {
    def common = getDependenciesUrls(configurations.common)
    manifest.attributes('Main-Class': 'me.coley.recaf.RecafUI',
            'Common-Dependencies': common.join(';'))
}
