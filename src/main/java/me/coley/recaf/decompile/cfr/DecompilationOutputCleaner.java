package me.coley.recaf.decompile.cfr;

import java.util.Set;

import me.coley.recaf.util.AccessFlag;

public class DecompilationOutputCleaner {
	/**
	 * Remove watermark &amp; oddities from decompilation output.
	 *
	 * @param decompilationText
	 * 		Decompilation text.
	 * @param className
	 * 		Class name.
	 *
	 * @return Decompilation without watermark.
	 */
	
	public String clean(String decompilationText, String className) {
		// Get rid of header comment
		if (decompilationText.startsWith("/*\n * Decompiled with CFR"))
			decompilationText = decompilationText.substring(decompilationText.indexOf("*/") + 3);
		// JavaParser does NOT like inline comments like this.
		decompilationText = decompilationText.replace("/* synthetic */ ", "");
		decompilationText = decompilationText.replace("/* bridge */ ", "");
		decompilationText = decompilationText.replace("/* enum */ ", "");
		decompilationText = decompilationText.replace(" - consider using --renameillegalidents true",
				" - recommend switching to table mode");

		// Fix inner class names being busted in decompilation text, needs to be "Inner$1"
		// instead of "Inner.1", as generated by CFR
		String classSimpleName = className.contains("/") ?
				className.substring(className.lastIndexOf('/') + 1) : className;
		if (classSimpleName.contains("$")) {
			String incorrectlyDecompiledClassSimpleName = classSimpleName.replace('$', '.');

			int indexOfincorrectlyDecompiledClassSimpleName =
					decompilationText.indexOf(incorrectlyDecompiledClassSimpleName);
			if (indexOfincorrectlyDecompiledClassSimpleName == -1) {
				// Generated CFR output does not match expectations.
				// Don't attempt to fix up matters and lets this pass through
				// with an indication that we encountered this challenge.
				// One example of this happening is in
				//   https://mvnrepository.com/artifact/com.google.code.gson/gson/2.2.4
				// with (true) class com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl
				// being decompiled by CFR to com.google.gson.internal.$Gson$Types.GenericArrayTypeImpl
				// Note that singular dot in there generated by CFR.
				decompilationText = "// ERROR: Unable to apply inner class name fixup" + System.lineSeparator()
						+ decompilationText;
				return decompilationText;
			}

			decompilationText = decompilationText.replace(incorrectlyDecompiledClassSimpleName, classSimpleName);

			String startText = decompilationText.substring(0, decompilationText.indexOf(classSimpleName));
			String startTextCopy = startText;
			Set<AccessFlag> allowed = AccessFlag.getApplicableFlags(AccessFlag.Type.CLASS);
			for (AccessFlag acc : AccessFlag.values()) {
				if (allowed.contains(acc))
					continue;
				if (startText.contains(acc.getName() + " ")) {
					startText = startText.replace(startText,
							startText.replace(acc.getCodeFriendlyName() + " ", ""));
				}
			}
			decompilationText = decompilationText.replace(startTextCopy, startText);
		}
		return decompilationText;
	}

}
