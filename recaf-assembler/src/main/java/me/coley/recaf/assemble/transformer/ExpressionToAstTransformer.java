package me.coley.recaf.assemble.transformer;

import javassist.CannotCompileException;
import javassist.ClassPool;
import javassist.CtClass;
import javassist.bytecode.BadBytecode;
import me.coley.recaf.assemble.ast.Code;
import me.coley.recaf.assemble.ast.arch.MethodDefinition;
import me.coley.recaf.assemble.ast.meta.Expression;
import org.objectweb.asm.tree.MethodNode;

import java.io.IOException;
import java.io.InputStream;
import java.util.Objects;
import java.util.function.Function;

/**
 * Visits an {@link Expression} and expands it into individual AST elements.
 *
 * @author Matt Coley
 */
public class ExpressionToAstTransformer {
	private final ExpressionToAsmTransformer toAsmTransformer;
	private final MethodDefinition definition;
	private final Variables variables;
	private Function<Expression, String> prefix = expression -> "expr" + Math.abs(expression.hashCode()) + "_";

	/**
	 * @param definition
	 * 		Method definition that contains the expression.
	 * @param variables
	 * 		Variable information.
	 * @param toAsmTransformer
	 * 		Transformer to convert the expression to bytecode.
	 */
	public ExpressionToAstTransformer(MethodDefinition definition, Variables variables,
									  ExpressionToAsmTransformer toAsmTransformer) {
		this.definition = definition;
		this.variables = variables;
		this.toAsmTransformer = toAsmTransformer;
	}

	/**
	 * @param expression
	 * 		Expression to visit.
	 *
	 * @return AST wrapper representing the expression's code.
	 *
	 * @throws CannotCompileException
	 * 		When adding the {@link #definition} to a {@link CtClass} fails.
	 * 		This is propagated from {@link ExpressionToAsmTransformer#transform(Expression)}.
	 * @throws BadBytecode
	 * 		When the generated bytecode is invalid.
	 * 		This is propagated from {@link ExpressionToAsmTransformer#transform(Expression)}.
	 * @throws IOException
	 * 		When {@link ClassPool#makeClass(InputStream, boolean)} fails.
	 * 		This is propagated from {@link ExpressionToAsmTransformer#transform(Expression)}.
	 */
	public Code transform(Expression expression) throws CannotCompileException, IOException, BadBytecode {
		ExpressionToAsmTransformer.TransformResult result = toAsmTransformer.transform(expression);
		MethodNode tempMethod = new MethodNode(
				definition.getModifiers().value(),
				definition.getName(),
				definition.getDesc(),
				null,
				null);
		tempMethod.instructions = result.getInstructions();
		tempMethod.tryCatchBlocks = result.getTryBlocks();
		BytecodeToAstTransformer toAstTransformer = new BytecodeToAstTransformer(tempMethod);
		toAstTransformer.prepopulateVariableNames(variables);
		toAstTransformer.setLabelPrefix(prefix.apply(expression));
		toAstTransformer.visit();
		return toAstTransformer.getUnit().getCode();
	}

	/**
	 * @param prefix
	 * 		Prefix provider.
	 */
	public void setLabelPrefixFunction(Function<Expression, String> prefix) {
		this.prefix = Objects.requireNonNull(prefix);
	}
}
